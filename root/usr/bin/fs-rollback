#!/bin/bash

top_level_subvolume=$1
file_system=$2
tmp_mount_point=/tmp/btrfs_$1

function mount_filesystem() {
  mkdir -p ${tmp_mount_point}
  mount -v LABEL=${top_level_subvolume} ${tmp_mount_point} || {
    echo -e "Mount failed on ${tmp_mount_point}"
    rm -rf ${tmp_mount_point}
    return 1
  }
}

function umount_filesystem() {
  umount -v ${tmp_mount_point} || umount -vl ${tmp_mount_point}
  rm -rf ${tmp_mount_point}
}

function load_snapshot() {
  local _line _current_rollback_snapshot _count_snapshot
  _count_snapshot=0
  while read _line; do
    _current_rollback_snapshot[$_count_snapshot]="${_line}"
    ((_count_snapshot++))
  done < <(btrfs subvolume list -r ${tmp_mount_point} | awk 'match($9, /^@/) {print $9}')
  if [ ${_count_snapshot} -eq 0 ]; then
    echo "No target snapshot to mount. Rollback requires snapshot"
    return 1
  elif [ ${_count_snapshot} -eq 1 ]; then
    target_snapshot=${_current_rollback_snapshot}
    if [ -d ${tmp_mount_point}/${top_level_subvolume}.old ]; then
      btrfs subvolume delete --commit-each ${tmp_mount_point}/${top_level_subvolume}.old && {
        echo "There is an old subvolume from previous boot. Removed it"
        :
      } || {
        echo "Can not delete old subvolume from previous boot"
        return 1
      }
    fi
    mv -v ${tmp_mount_point}/${top_level_subvolume} ${tmp_mount_point}/${top_level_subvolume}.old || {
      echo "Can not backup current subvolume"
      return 1
    }
    btrfs subvolume snapshot ${tmp_mount_point}/${target_snapshot} ${tmp_mount_point}/${top_level_subvolume} || {
      mv -v ${tmp_mount_point}/${top_level_subvolume}.old ${tmp_mount_point}/${top_level_subvolume}
      echo -e "Can not take snapshot to mount from ro_snapshot.\nUndo current subvolume"
      return 1
    }
  else
    btrfs subvolume list -r ${tmp_mount_point} | awk 'match($9, /^@/) {print $9}'
    echo "Current snapshot is not one. An error has occuerred"
    return 1
  fi
}

if [ $# -ne 2 ]; then
  echo -e "Only can be run on service"
  exit 1
fi

cat /etc/fstab | grep $2 >/dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "Target filesystem does not exist"
  exit 1
fi

mount_filesystem || {
  umount_filesystem
  exit 1
}

test -d ${tmp_mount_point}/${top_level_subvolume} || {
  umount_filesystem
  echo "Can not read previous boot data"
  exit 1
}

load_snapshot || {
  umount_filesystem
  echo "Can not rollback. Mounted previous boot data"
  exit 1
}

umount_filesystem && {
  echo -e "Complete rollback to [${target_snapshot#\@}]"
}
