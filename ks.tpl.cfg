#version=DEVEL
# System authorization information
authselect --enableshadow --passalgo=sha512
# Non-interactive mode
cmdline
# Reboot After install
reboot
# Run the Setup Agent on first boot
firstboot --disable
ignoredisk --only-use=@@DISK_DEVS@@
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='jp'
# System language
lang en_US.UTF-8
# SELinux
selinux --disabled
# Do not configure the X Window System
skipx
# System services
services --enabled="chronyd,docker"
# System timezone
timesource --ntp-disable
# Group
group --name=docker

%include /tmp/ks.media.cfg

# Partition clearing information
clearpart --all --initlabel --drives=@@DISK_DEVS@@
# Create partitions
part /boot/efi --fstype="efi" --ondisk=sda --size=200 --fsoptions="umask=0077,shortname=winnt"
part / --fstype="ext4" --ondisk=@@MAIN_DISK@@ --size=2048 --mkfsoptions="-U 64eb4db5-3385-46a5-a3d5-c48197a53555"
part /persist --fstype="ext4" --ondisk=@@MAIN_DISK@@ --size=200 --mkfsoptions="-U ff9691f9-7c97-4411-8f44-12685ee4a003" --fsoptions="defaults,x-initrd.mount"
part /root2 --fstype="ext4" --ondisk=@@MAIN_DISK@@ --size=2048 --mkfsoptions="-U d2ada949-7fff-4257-91e9-793b25b0df02"
part /var/log --fstype="ext4" --ondisk=@@MAIN_DISK@@ --size=@@PARTSIZE_LOG@@ --mkfsoptions="-U ff9691f9-7c97-4411-8f44-12685ee4a006" --fsoptions="defaults,x-initrd.mount,x-systemd.before=symlink-removable.service"
part btrfs.10 --fstype="btrfs" --ondisk=@@MAIN_DISK@@ --size=@@PARTSIZE_DOCKER@@ --fsoptions="x-systemd.wanted-by=remote-fs.target,x-systemd.wanted-by=docker.service,x-systemd.before=docker.service"
part btrfs.12 --fstype="btrfs" --ondisk=@@MAIN_DISK@@ --size=@@PARTSIZE_CACHE@@ --fsoptions="x-systemd.wanted-by=remote-fs.target"
part btrfs.14 --fstype="btrfs" --ondisk=@@MAIN_DISK@@ --size=@@PARTSIZE_OPT@@ --fsoptions="defaults,nofail,x-initrd.mount"
btrfs none --label=var_lib_docker btrfs.10
btrfs none --label=var_cache btrfs.12
btrfs none --label=opt btrfs.14
btrfs /var/lib/docker --subvol --name=var_lib_docker LABEL=var_lib_docker
btrfs /var/cache --subvol --name=var_cache LABEL=var_cache
btrfs /opt --subvol --name=opt LABEL=opt

@@KS.ROOT.CFG@@


%pre --log=/mnt/sysimage/root/ks-pre.log
echo > /dev/ttyS0 || true
echo "tmpfsroot-fedora: starting" > /dev/ttyS0 || true

if [ -b /dev/cdrom ]
then
  # CDROM install
  echo "cdrom" > /tmp/ks.media.cfg
else
  # iPXE install
  echo "url --url http://172.16.250.1/iso" > /tmp/ks.media.cfg
fi

@@KS.PRE.CFG@@
%end


%pre-install --log=/mnt/sysimage/root/ks-pre-install.log
if [ ! -b /dev/cdrom ]
then
  # Make anaconda to use /root2 as rpm download directory
  mount --bind /mnt/sysimage/root2 /var/tmp
  dd if=/dev/zero of=/mnt/sysimage/dummy bs=1k count=10k # Consume rootfs capacity to make root2 choosen
fi

@@KS.PRE-INSTALL.CFG@@
%end


%packages --exclude-weakdeps --excludedocs --instLangs=en
@^custom-environment
%end


%addon com_redhat_kdump --disable --reserve-mb='128'
%end


%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end


# Start post install script without chroot
%post --nochroot --log=/mnt/sysimage/root/ks-post-nochroot.log
set -eu

touch /mnt/sysimage/root/ks-post-nochroot.fail
@@KS.POST-NOCHROOT.CFG@@
rm /mnt/sysimage/root/ks-post-nochroot.fail
%end


# Start post install script with chroot
%post --log=/root/ks-post.log
set -eu

if [ -f /root/ks-post-nochroot.fail ]
then
  echo "nochroot post install script failed"
  false
fi

# Install busybox to add missing commands
/usr/sbin/busybox --install -s

mkdir -p /tmp/installer
cd /tmp/installer

if [ -b /dev/cdrom ]
then
  mkdir /mnt/cdrom
  mount -v /dev/cdrom /mnt/cdrom
  tar xzf /mnt/cdrom/custom-files.tar.gz
  umount /mnt/cdrom
  rm -rf /mnt/cdrom
else
  rm -f /dummy

  curl -O http://172.16.250.1/iso/custom-files.tar.gz
  tar xzf custom-files.tar.gz
fi

cp -r root/* /

touch /persist/PROVISIONING
sed -i '/\/persist/s/defaults/defaults,ro/g' /etc/fstab
sed -i '/\/var\/lib\/docker/s/^UUID=\S\+\s\+/LABEL=var_lib_docker /g' /etc/fstab
sed -i '/\/var\/cache/s/^UUID=\S\+\s\+/LABEL=var_cache /g' /etc/fstab
sed -i '/\/opt/s/^UUID=\S\+\s\+/LABEL=opt /g' /etc/fstab

@@KS.POST.CFG@@

# Custom scripts
if [ -d hooks.d ]
then
  for script in hooks.d/*.sh
  do
    ${script}
  done
fi

# Generate initramfs with tmpfsroot
kernel_version=$(rpm -qa | grep kernel-[0-9] | sed -e 's/kernel-//')

sed -i -e 's/^\(GRUB_CMDLINE_LINUX\)=\"\(.*\)\"/\1="\2 tmpfsroot.size=2G"/' /etc/default/grub
echo "GRUB_DISK_UUID0=64eb4db5-3385-46a5-a3d5-c48197a53555" >> /etc/default/grub
echo "GRUB_DISK_UUID1=d2ada949-7fff-4257-91e9-793b25b0df02" >> /etc/default/grub
grub2-mkconfig > /boot/efi/EFI/fedora/grub.cfg

dracut -v --xz --no-hostonly --force /boot/initramfs-${kernel_version}.img ${kernel_version}
ln -vs /boot/initramfs-${kernel_version}.img /boot/initramfs.img
ln -vs /boot/vmlinuz-${kernel_version} /boot/vmlinuz

# Remove entries from fstab
for mnt in \
  \\/root2 \
  \\/boot\\/efi
do
  sed -i "/${mnt}/d" /etc/fstab
done

# Remove unused mount points
for mnt in \
  "/root2"
do
  for dir in $(eval ls -1d ${mnt})
  do
    umount ${dir}
    rm -rf ${dir}
  done
done

# Remove packages not required runtime
rpm -e --nodeps \
  grub2-tools \
  pkgconf

# Reduce data size
(cd /usr/share/locale && rm -rf $(ls -1 | grep -v "^en_US$"))
rm -rf \
  /usr/share/licenses \
  /usr/share/man \
  /usr/share/doc

# Remove unused binaries
rm -vr \
  /usr/bin/containerd-shim-runc-v1 \
  /usr/bin/ctr \
  /usr/bin/rootlesskit \
  /usr/bin/rootlesskit-docker-proxy \
  /usr/libexec/docker/cli-plugins

# Remove pycache
rm -r $(find / -name __pycache__)

# Remove build-id data
rm -r /usr/lib/.build-id

(
  # Remove shared objects which are not referenced from any executable and library
  mkdir -p /tmp/lib-cleanup
  cd /tmp/lib-cleanup

  for i in $(seq 10)
  do
    (
      find /usr -executable -exec file {} \; | grep ': ELF' | cut -d: -f1
      find /usr -name '*.so*'
    ) | xargs -n1 ldd 2> /dev/null \
      | sed -n 's/.*\s\(\S*\.so\S*\).*/\1/p' \
      | sort | uniq > referenced

    (
      cat referenced
      cat referenced | grep '^/' | xargs -n1 realpath
    ) | xargs -n1 basename | sort | uniq > refs

    find /usr/lib64 -name '*.so.*' -type f | grep '\.so\(\.[0-9]\+\)*$' | sort | uniq > libs.non-ref
    cat refs | xargs -n1 -P1 -I{} sed '/\/{}/d' -i libs.non-ref

    if [ $(cat libs.non-ref | wc -w) -eq 0 ]
    then
      break
    fi
    echo removing $(cat libs.non-ref)
    rm $(cat libs.non-ref)
  done

  # Remove broken symlinks
  find /usr/lib64 -name '*.so*' -type l ! -exec test {} \; -delete

  rm -rf /tmp/lib-cleanup
)

ldconfig
journalctl --update-catalog

cd
rm -rf /tmp/installer

echo > /dev/ttyS0 || true
echo "tmpfsroot-fedora: succeeded" > /dev/ttyS0 || true
%end

# Output error to serial console
%onerror
echo > /dev/ttyS0 || true
echo "tmpfsroot-fedora: failed" > /dev/ttyS0 || true
%end
